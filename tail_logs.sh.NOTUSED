#!/usr/bin/ksh93

# APM_DIR=/u07/app/prod/apm
# PARSER_DIR=$APM_DIR/streaming_stat_parser

# ENQUEUE=$PARSER_DIR/enqueue.js

echo "PID:$$" >&2
if [ $(ps -fu $(whoami) | grep "$(basename $0)" | egrep -v "vim|grep" | wc -l) -gt 1 ]; then
  echo "Already running! Attempting to kill it..." >&2
  PIDS=$(ps -fu $(whoami) | grep "$(basename $0)" | egrep -v "vim|grep" | awk -vmypid=$$ '{if ($2 != mypid) print $2}')
  for PID in $PIDS; do
    echo "kill -9 $PID" >&2
    kill -9 $PID
  done
  if [ $(ps -fu $(whoami) | grep "$(basename $0)" | egrep -v "vim|grep" | wc -l) -gt 1 ]; then
    echo "Still running! Couldn't kill:" >&2
    ps -fu $(whoami) | grep "$(basename $0)" | egrep -v "vim|grep" >&2
    echo "Exiting 9..." >&2
    exit 9
  fi
fi

if [ $# -ne 2 ]; then
  echo "Usage: $0 LOG_DIR_MASK_PREFIX COMMA_DELIM_RAW_MASKS" >&2
  exit 2
fi

#JVM_SERVERS=$(cat $APM_DIR/jvm_servers.list)

# LOG_DIR_MASK_PREFIX='/net/*/u01/export/prod/jvm1/log'
LOG_DIR_MASK_PREFIX="$1"

PID=$$
echo "PID=$PID" >&2

MASKS=""
# MASKS="$LOG_DIR_MASK_PREFIX/S4*log $LOG_DIR_MASK_PREFIX/server.log "
RAW_MASKS="$(echo "$2" | sed 's|,| |g')"
for MASK in $RAW_MASKS; do
  MASKS="$MASKS$LOG_DIR_MASK_PREFIX/$MASK "
done
echo "MASKS: $MASKS" >&2

echo "Starting tail->enqueue process..." >&2

typeset -A PROV_TS_ARR
typeset -A PROV_FLAG_ARR

{ tail --max-unchanged-stats=1 --retry --pid=$PID -F $MASKS 2>&1 >&3 3>&- | grep -v "following end of new file" >&2 3>&-; } 3>&1
# awk '{
#     print $0;
# }'

# The complex bit around tail is to only filter the error message "following end of new file" and not other errors
# This awk syntax is using two regexes as a range expression, this only really matters for the Provider entries from AuditTrail stopWatch
# { tail --max-unchanged-stats=1 --retry --pid=$PID -F $MASKS 2>&1 >&3 3>&- | grep -v "following end of new file" >&2 3>&-; } 3>&1 | 

# awk '/^==>|^=== jbossId=.*IO=I|<accountNumber>|INFO  \[CommonTiming]|.*CommonTiming::|.*INFO.*requestTrace=RequestTrace.*stopWatchList=|^[A-Z][a-z]*.*:.*millis.*Millis|^]|util.StopWatch>|<name>|<startTime>|<stopTime>/' | while read LINE; do

#     echo "$LINE"
#   START COMMENT
#   # Each time tail prints from a diff log, it prints a header with ==> at the beginning
#   if [[ "$LINE" =~ ^==> ]]; then
#     LOGNAME=$(echo "$LINE" | sed -e 's|==> ||' -e 's| <==||')
#     SERVER=$(echo "$LOGNAME" | sed -e 's|/net/||' -e 's|/.*||')

#   # Get the timestamp from the beginning of audit trail's stopwatch print, it all prints from this line, but with newlines in the text making parsing complicated
#   # This timestamp is only used on the Provider entries
#   elif [[ "$LINE" =~ stopWatchList= ]]; then
#     TIMESTAMP=$(echo "$LINE" | awk '{print $2" "$3}' | sed 's|,[0-9]\{3\}||')
#     PROV_TS_ARR[$LOGNAME]="$TIMESTAMP"
#     PROV_FLAG_ARR[$LOGNAME]=true
# #    ${PROV_TS_ARR[$LOGNAME]} 

#   # Parse end of provider section
#   elif [[ "$LINE" =~ '^]' ]]; then
#     PROV_FLAG_ARR[$LOGNAME]=false

#   # Parse provider lines
#   elif [[ "$LINE" =~ ^Provider ]]; then

#     if [ "${PROV_FLAG_ARR[$LOGNAME]}" != "true" ]; then
#       continue
#     fi
#     # if [ $(echo "$LINE" | egrep -qi "fdr|amf|cb"; echo $?) -ne 0 ]; then
#     #   continue
#     # fi
#     # echo "$LINE" | sed -e 's|:\[| |' -e 's| millis].*||' | sed 's|Provider\[\([^]]*\)]|Provider:\1|' | awk -vserver=$SERVER -vts="$TIMESTAMP" '{print ts","server","$1","$2}' | awk -F, -vline="$LINE" '{if ($1 ~ /INFO/ || $3 == "" || $4 == "") print "CHECKTHIS@Provider: " line > "/dev/stderr"; print}'

#     echo "$LINE" | sed -e 's|:\[| |' -e 's| millis].*||' | sed 's|Provider\[\([^]]*\)]|Provider:\1|' | awk -vserver=$SERVER -vts="${PROV_TS_ARR[$LOGNAME]}" '{print ts","server","$1","$2}'

#   # Parse CommonTiming logs, this includes two styles/sources. 1. From delegation ear overall soap timing, these get prefixed with "S:" 2. regular CommonTiming entries 
#   elif [[ "$LINE" =~ CommonTiming ]]; then

#     if [[ "$LINE" =~ CommonTiming::Stop ]]; then
#       echo "$LINE" | sed -e 's|.*\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\),[0-9]*.*INFO.*Stop: \([^ ]\+\) .*time \([0-9]\+\) .*|\1,\2,\3|' | awk -F, -vserver=$SERVER '{print $1","server","$2","$3}'

#     elif [[ "$LINE" =~ "Total time" ]]; then
#       echo "$LINE" | sed -e 's|.*\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}\),[0-9]*.*INFO.*taken for: \([^ ]\+\) - \([0-9]\+\) ms.*|\1,S:\2,\3|' | awk -F, -vserver=$SERVER '{print $1","server","$2","$3}'

#     # Else do nothing
#     fi

#   # else do nothing
#   fi
#   END COMMENT
# done # | awk -F, '{if ($3 == "" || $4 !~ /^[0-9]+$/ || $1 !~ /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/) print "CHECKTHIS: " $0 > "/dev/stderr"; else print $0}'



